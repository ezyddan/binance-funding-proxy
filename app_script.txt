// ===== MAIN 1: ‡∏î‡∏∂‡∏á Funding Fee + ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô + ‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç =====
function fetchFundingFeeFromAccount() {
  const sheetLedger = getOrCreateSheet("FundingLedger");
  const sheetSummary = getOrCreateSheet("DailySummary");
  const sheetConfig = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Config");
  const timeZone = Session.getScriptTimeZone();

  const apiKey = sheetConfig.getRange("B1").getValue().toString().trim();
  const apiSecret = sheetConfig.getRange("B2").getValue().toString().trim();
  const payload = { apiKey: apiKey, apiSecret: apiSecret };
  const url = "https://binance-funding-proxy-production.up.railway.app/account-funding";

  const options = {
    method: "post",
    contentType: "application/json",
    payload: JSON.stringify(payload),
    muteHttpExceptions: true
  };

  const response = UrlFetchApp.fetch(url, options);
  const raw = response.getContentText();

  let data;
  try {
    data = JSON.parse(raw);
    if (!Array.isArray(data)) throw new Error(data.msg || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ");
  } catch (e) {
    SpreadsheetApp.getUi().alert("‚ùå ERROR: " + e.message);
    Logger.log(raw);
    return;
  }

  sheetLedger.clearContents();
  sheetLedger.appendRow(["Date/Time", "Symbol", "Income (USDT)", "Funding Time", "Type"]);

  const summaryMap = {}; // key = date|symbol
  const now = Utilities.formatDate(new Date(), timeZone, "yyyy-MM-dd HH:mm");

  data.forEach(entry => {
    const income = parseFloat(entry.income);
    const fundingTime = new Date(entry.time);
    const formattedTime = Utilities.formatDate(fundingTime, timeZone, "yyyy-MM-dd HH:mm");
    const dateKey = Utilities.formatDate(fundingTime, timeZone, "yyyy-MM-dd");
    const symbol = entry.symbol;
    const type = income >= 0 ? "‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö" : "‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢";

    sheetLedger.appendRow([now, symbol, income, formattedTime, type]);

    const summaryKey = `${dateKey}|${symbol}`;
    if (!Object.hasOwn(summaryMap, summaryKey)) {
      summaryMap[summaryKey] = { date: dateKey, symbol: symbol, total: 0 };
    }
    summaryMap[summaryKey].total += income;
  });

  const sorted = Object.values(summaryMap).sort((a, b) =>
    a.date.localeCompare(b.date) || a.symbol.localeCompare(b.symbol)
  );

  const symbolTotals = {};
  const dailyRows = [];

  sorted.forEach(entry => {
    const direction = entry.total >= 0 ? "‚úÖ ‡∏ö‡∏ß‡∏Å" : "‚ùå ‡∏•‡∏ö";
    dailyRows.push([entry.date, entry.symbol, entry.total, direction]);

    if (!symbolTotals[entry.symbol]) symbolTotals[entry.symbol] = 0;
    symbolTotals[entry.symbol] += entry.total;
  });

  // ===== ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô DailySummary: ‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡∏™‡∏∏‡∏î =====
  sheetSummary.clearContents();
  sheetSummary.appendRow(["üî• ‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"]);
  sheetSummary.appendRow(["Symbol", "Total All Time (USDT)"]);
  Object.entries(symbolTotals).forEach(([symbol, total]) => {
    sheetSummary.appendRow([symbol, total]);
  });

  sheetSummary.appendRow([""]);
  sheetSummary.appendRow(["Date", "Symbol", "Total Income (USDT)", "Direction"]);
  dailyRows.forEach(row => sheetSummary.appendRow(row));

  applySummaryFormatting("DailySummary");
}

// ===== MAIN 2: ‡∏î‡∏∂‡∏á Funding Rate (Public) =====
function fetchFundingRatePublic() {
  const sheet = getOrCreateSheet("FundingRatePublic");
  sheet.clear();
  sheet.appendRow(["Date/Time", "Symbol", "Rate (%)", "Funding Time", "Status"]);

  const timeZone = Session.getScriptTimeZone();
  const now = Utilities.formatDate(new Date(), timeZone, "yyyy-MM-dd HH:mm");

  const baseSymbols = ["BTCUSDT", "ETHUSDT", "SOLUSDT"];
  const summarySheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("DailySummary");
  const summarySymbolsRaw = summarySheet.getRange("B2:B" + summarySheet.getLastRow()).getValues();
  const summarySymbols = summarySymbolsRaw.flat().filter(s => !!s);

  const allSymbols = [...new Set([...baseSymbols, ...summarySymbols])];

  allSymbols.forEach(symbol => {
    try {
      const url = `https://binance-funding-proxy-production.up.railway.app/funding-rate?symbol=${symbol}`;
      const response = UrlFetchApp.fetch(url);
      const data = JSON.parse(response.getContentText())[0];

      const rate = parseFloat(data.fundingRate);
      const ratePercent = (rate * 100).toFixed(4);
      const fundingTime = Utilities.formatDate(new Date(data.fundingTime), timeZone, "yyyy-MM-dd HH:mm");
      const status = rate >= 0 ? "‚úÖ ‡∏ö‡∏ß‡∏Å" : "‚ùå ‡∏•‡∏ö";

      sheet.appendRow([now, symbol, ratePercent, fundingTime, status]);
    } catch (e) {
      Logger.log(`‚ùå Error fetching ${symbol}: ${e.message}`);
    }
  });
}

// ===== MAIN 3: ‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (PositionNow) =====
function fetchCurrentPosition() {
  const sheet = getOrCreateSheet("PositionNow");
  const configSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Config");
  const timeZone = Session.getScriptTimeZone();

  const apiKey = configSheet.getRange("B1").getValue().toString().trim();
  const apiSecret = configSheet.getRange("B2").getValue().toString().trim();
  const url = "https://binance-funding-proxy-production.up.railway.app/account-positions";

  const payload = { apiKey: apiKey, apiSecret: apiSecret };

  const options = {
    method: "post",
    contentType: "application/json",
    payload: JSON.stringify(payload),
    muteHttpExceptions: true
  };

  const response = UrlFetchApp.fetch(url, options);
  const raw = response.getContentText();

  let data;
  try {
    data = JSON.parse(raw);
    if (!Array.isArray(data)) throw new Error(data.msg || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á");
  } catch (e) {
    SpreadsheetApp.getUi().alert("‚ùå ERROR: " + e.message);
    Logger.log(raw);
    return;
  }

  sheet.clear();
  sheet.appendRow(["Date/Time", "Symbol", "Side", "Size", "Entry Price", "Mark Price", "Unrealized PnL (USDT)"]);

  const now = Utilities.formatDate(new Date(), timeZone, "yyyy-MM-dd HH:mm");

  data.forEach(pos => {
    const size = parseFloat(pos.positionAmt);
    if (size === 0) return;

    const side = size > 0 ? "Long" : "Short";
    const row = [
      now,
      pos.symbol,
      side,
      size,
      parseFloat(pos.entryPrice),
      parseFloat(pos.markPrice),
      parseFloat(pos.unrealizedProfit)
    ];
    sheet.appendRow(row);
  });

  applyPositionFormatting("PositionNow");
}

function fetchPositionHistory() {
  const sheet = getOrCreateSheet("PositionHistory");
  const config = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Config");
  const timeZone = Session.getScriptTimeZone();

  const apiKey = config.getRange("B1").getValue().toString().trim();
  const apiSecret = config.getRange("B2").getValue().toString().trim();

  const url = "https://binance-funding-proxy-production.up.railway.app/account-income";
  const weekAgo = Date.now() - 30 * 24 * 60 * 60 * 1000
  console.log(weekAgo)
  const payload = {
    apiKey: apiKey,
    apiSecret: apiSecret,
    incomeType: "REALIZED_PNL",
    startTime: weekAgo
  };

  const options = {
    method: "post",
    contentType: "application/json",
    payload: JSON.stringify(payload),
    muteHttpExceptions: true
  };

  const response = UrlFetchApp.fetch(url, options);
  const raw = response.getContentText();

  try {
    data = JSON.parse(raw);


    if (!Array.isArray(data)) throw new Error(data.msg || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
  } catch (e) {
    SpreadsheetApp.getUi().alert("‚ùå ERROR: " + e.message);
    Logger.log(raw);
    return;
  }

  sheet.clearContents();
  sheet.appendRow(["Date/Time", "Symbol", "PnL (USDT)", "Funding Time", "Note"]);

  const now = Utilities.formatDate(new Date(), timeZone, "yyyy-MM-dd HH:mm");

  data.forEach(entry => {
    const pnl = parseFloat(entry.income);
    const timeFormatted = Utilities.formatDate(new Date(entry.time), timeZone, "yyyy-MM-dd HH:mm");
    const note = entry.info || "";
    sheet.appendRow([
      now,
      entry.symbol,
      pnl,
      timeFormatted,
      note
    ]);
  });

  applyPNLFormatting("PositionHistory");
}

function buildRevenueDashboard() {
  const timeZone = Session.getScriptTimeZone();
  const ledgerSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("FundingLedger");
  const positionSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("PositionHistory");
  const dashboardSheet = getOrCreateSheet("Dashboard");
  dashboardSheet.clearContents();

  const fundingMap = {};  // { yyyy-MM-dd: sum }
  const positionMap = {}; // { yyyy-MM-dd: sum }

  // ‚úÖ 1. ‡∏™‡∏£‡∏∏‡∏õ funding fee ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
  const ledgerData = ledgerSheet.getDataRange().getValues();
  for (let i = 1; i < ledgerData.length; i++) {
    const income = parseFloat(ledgerData[i][2]);
    const time = new Date(ledgerData[i][3]);
    const day = Utilities.formatDate(time, timeZone, "yyyy-MM-dd");

    if (!fundingMap[day]) fundingMap[day] = 0;
    fundingMap[day] += income;
  }

  // ‚úÖ 2. ‡∏™‡∏£‡∏∏‡∏õ position PnL ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
  const positionData = positionSheet.getDataRange().getValues();
  for (let i = 1; i < positionData.length; i++) {
    const pnl = parseFloat(positionData[i][2]);
    const time = new Date(positionData[i][3]);
    const day = Utilities.formatDate(time, timeZone, "yyyy-MM-dd");

    if (!positionMap[day]) positionMap[day] = 0;
    positionMap[day] += pnl;
  }

  // ‚úÖ 3. ‡∏£‡∏ß‡∏°‡∏™‡∏≠‡∏á‡∏ù‡∏±‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤ Dashboard
  const allDays = Array.from(new Set([...Object.keys(fundingMap), ...Object.keys(positionMap)]))
    .sort();

  dashboardSheet.appendRow(["Date", "Funding Income (USDT)", "Position PnL (USDT)", "Net Total (USDT)", "Direction"]);

  allDays.forEach(day => {
    const funding = fundingMap[day] || 0;
    const position = positionMap[day] || 0;
    const total = funding + position;
    const direction = total >= 0 ? "‚úÖ ‡∏ö‡∏ß‡∏Å" : "‚ùå ‡∏•‡∏ö";
    dashboardSheet.appendRow([day, funding, position, total, direction]);
  });

  applyDashboardFormatting("Dashboard");
}

// ===== FORMATTER: ‡∏™‡∏µ‡πÉ‡∏ô DailySummary & SummaryTotal =====
function applySummaryFormatting(sheetName) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(sheetName);
  const lastRow = sheet.getLastRow();

  const incomeRange = sheet.getRange("C2:C" + lastRow);
  const directionRange = sheet.getRange("D2:D" + lastRow);
  incomeRange.clearFormat();
  directionRange.clearFormat();

  const rules = [
    SpreadsheetApp.newConditionalFormatRule()
      .whenNumberGreaterThan(0)
      .setFontColor("#1b5e20")
      .setRanges([incomeRange])
      .build(),

    SpreadsheetApp.newConditionalFormatRule()
      .whenNumberLessThan(0)
      .setFontColor("#c62828")
      .setRanges([incomeRange])
      .build(),

    SpreadsheetApp.newConditionalFormatRule()
      .whenTextContains("‡∏ö‡∏ß‡∏Å")
      .setBackground("#e0f7e9")
      .setFontColor("#1a7f37")
      .setRanges([directionRange])
      .build(),

    SpreadsheetApp.newConditionalFormatRule()
      .whenTextContains("‡∏•‡∏ö")
      .setBackground("#fdecea")
      .setFontColor("#b71c1c")
      .setRanges([directionRange])
      .build()
  ];

  const values = sheet.getRange(1, 1, lastRow).getValues();
  let summaryStartRow = -1;
  for (let i = 0; i < values.length; i++) {
    if (values[i][0] === "üî• ‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î") {
      summaryStartRow = i + 3;
      break;
    }
  }

  if (summaryStartRow > 0) {
    const totalRange = sheet.getRange("B" + summaryStartRow + ":B" + lastRow);
    rules.push(
      SpreadsheetApp.newConditionalFormatRule()
        .whenNumberGreaterThan(0)
        .setFontColor("#1b5e20")
        .setBackground("#e8f5e9")
        .setRanges([totalRange])
        .build(),

      SpreadsheetApp.newConditionalFormatRule()
        .whenNumberLessThan(0)
        .setFontColor("#c62828")
        .setBackground("#ffebee")
        .setRanges([totalRange])
        .build()
    );
  }

  sheet.setConditionalFormatRules(rules);
}

// ===== FORMATTER: ‡∏™‡∏µ‡πÉ‡∏ô PositionNow =====
function applyPositionFormatting(sheetName) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(sheetName);
  const lastRow = sheet.getLastRow();
  const pnlRange = sheet.getRange("G2:G" + lastRow);
  pnlRange.clearFormat();

  const rules = [
    SpreadsheetApp.newConditionalFormatRule()
      .whenNumberGreaterThan(0)
      .setFontColor("#1b5e20")
      .setBackground("#e8f5e9")
      .setRanges([pnlRange])
      .build(),

    SpreadsheetApp.newConditionalFormatRule()
      .whenNumberLessThan(0)
      .setFontColor("#c62828")
      .setBackground("#ffebee")
      .setRanges([pnlRange])
      .build()
  ];

  sheet.setConditionalFormatRules(rules);
}
function applyPNLFormatting(sheetName) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(sheetName);
  const lastRow = sheet.getLastRow();
  const pnlRange = sheet.getRange("C2:C" + lastRow);

  pnlRange.clearFormat();

  const rules = [
    SpreadsheetApp.newConditionalFormatRule()
      .whenNumberGreaterThan(0)
      .setFontColor("#1b5e20")
      .setBackground("#e8f5e9")
      .setRanges([pnlRange])
      .build(),

    SpreadsheetApp.newConditionalFormatRule()
      .whenNumberLessThan(0)
      .setFontColor("#c62828")
      .setBackground("#ffebee")
      .setRanges([pnlRange])
      .build()
  ];

  sheet.setConditionalFormatRules(rules);
}
function applyDashboardFormatting(sheetName) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(sheetName);
  const lastRow = sheet.getLastRow();

  const netRange = sheet.getRange("D2:D" + lastRow);
  const directionRange = sheet.getRange("E2:E" + lastRow);
  netRange.clearFormat();
  directionRange.clearFormat();

  const rules = [
    SpreadsheetApp.newConditionalFormatRule()
      .whenNumberGreaterThan(0)
      .setFontColor("#1b5e20")
      .setBackground("#e8f5e9")
      .setRanges([netRange])
      .build(),

    SpreadsheetApp.newConditionalFormatRule()
      .whenNumberLessThan(0)
      .setFontColor("#c62828")
      .setBackground("#ffebee")
      .setRanges([netRange])
      .build(),

    SpreadsheetApp.newConditionalFormatRule()
      .whenTextContains("‡∏ö‡∏ß‡∏Å")
      .setBackground("#e0f2f1")
      .setFontColor("#00796b")
      .setRanges([directionRange])
      .build(),

    SpreadsheetApp.newConditionalFormatRule()
      .whenTextContains("‡∏•‡∏ö")
      .setBackground("#fbe9e7")
      .setFontColor("#bf360c")
      .setRanges([directionRange])
      .build()
  ];

  sheet.setConditionalFormatRules(rules);
}

// ===== UTILITY: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏µ‡∏ó‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ =====
function getOrCreateSheet(name) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  return ss.getSheetByName(name) || ss.insertSheet(name);
}
